/// <reference types="node" />
import { ClanSearchOptions, SearchOptions, ClientOptions, LoginOptions, OverrideOptions } from '../types';
import { EVENTS, CWL_ROUNDS } from '../util/Constants';
import { RESTManager } from '../rest/RESTManager';
import { EventManager } from './EventManager';
import { EventEmitter } from 'events';
import { Util } from '../util/Util';
import { Clan, ClanMember, ClanWar, ClanWarLog, League, Location, Player, WarLeague, RankedClan, RankedPlayer, Label, SeasonRankedPlayer, GoldPassSeason, ClanWarLeagueGroup } from '../struct';
/**
 * Represents Clash of Clans API Client.
 * ```js
 * const { Client } = require('clashofclans.js');
 * const client = new Client({ keys: ['***'] });
 * ```
 */
export declare class Client extends EventEmitter {
    /** Event Manager for the client. */
    readonly events: EventManager;
    /** REST Handler of the client. */
    readonly rest: RESTManager;
    constructor(options?: ClientOptions);
    /** Contains various general-purpose utility methods. */
    get util(): typeof Util;
    /** Whether the API is in maintenance break. */
    get inMaintenance(): boolean;
    /**
     * Initialize the client to create keys.
     * @example
     * ```
     * const client = new Client();
     * client.login({ email: 'developer@email.com', password: '***' });
     * ```
     */
    login(options: LoginOptions): Promise<string[]>;
    /** Set Clash of Clans API keys. */
    setKeys(keys: string[]): this;
    /** Search all clans by name and/or filtering the results using various criteria. */
    getClans(query: ClanSearchOptions, options?: OverrideOptions): Promise<Clan[]>;
    /** Get info about a clan. */
    getClan(clanTag: string, options?: OverrideOptions): Promise<Clan>;
    /** Get list of clan members. */
    getClanMembers(clanTag: string, options?: SearchOptions): Promise<ClanMember[]>;
    /** Get clan war log. */
    getClanWarLog(clanTag: string, options?: SearchOptions): Promise<ClanWarLog[]>;
    /** Get info about currently running war (normal or friendly) in the clan. */
    getClanWar(clanTag: string, options?: OverrideOptions): Promise<ClanWar>;
    /**
     * Get info about currently running war in the clan.
     * @example
     * ```ts
     * await client.getCurrentWar('#8QU8J9LP');
     * ```
     * @example
     * ```ts
     * await client.getCurrentWar({ clanTag: '#8QU8J9LP', round: 'PREVIOUS_ROUND' });
     * ```
     */
    getCurrentWar(clanTag: string | {
        clanTag: string;
        round?: keyof typeof CWL_ROUNDS;
    }, options?: OverrideOptions): Promise<ClanWar | null>;
    /**
     * Get info about currently running CWL round.
     * @example
     * ```ts
     * await client.getLeagueWar('#8QU8J9LP');
     * ```
     * @example
     * ```ts
     * await client.getLeagueWar({ clanTag: '#8QU8J9LP', round: 'PREVIOUS_ROUND' });
     * ```
     */
    getLeagueWar(clanTag: string | {
        clanTag: string;
        round?: keyof typeof CWL_ROUNDS;
    }, options?: OverrideOptions): Promise<ClanWar | null>;
    private _getCurrentLeagueWars;
    private _getClanWars;
    /** Get info about clan war league. */
    getClanWarLeagueGroup(clanTag: string, options?: OverrideOptions): Promise<ClanWarLeagueGroup>;
    /** Get info about a CWL round by WarTag. */
    getClanWarLeagueRound(warTag: string | {
        warTag: string;
        clanTag?: string;
    }, options?: OverrideOptions): Promise<ClanWar>;
    /** Get info about a player by tag. */
    getPlayer(playerTag: string, options?: OverrideOptions): Promise<Player>;
    /** Verify Player API token that can be found from the Game settings. */
    verifyPlayerToken(playerTag: string, token: string, options?: OverrideOptions): Promise<boolean>;
    /** Get list of Leagues. */
    getLeagues(options?: SearchOptions): Promise<League[]>;
    /** Get Legend League season Ids. */
    getLeagueSeasons(options?: SearchOptions): Promise<string[]>;
    /** Get Legend League season rankings by season Id. */
    getSeasonRankings(seasonId: string, options?: SearchOptions): Promise<SeasonRankedPlayer[]>;
    /** Get list of Clan War Leagues. */
    getWarLeagues(options?: SearchOptions): Promise<WarLeague[]>;
    /** Get list of Locations. */
    getLocations(options?: SearchOptions): Promise<Location[]>;
    /**
     * Get clan rankings for a specific location.
     *
     * For global ranking, use `global` as `locationId`.
     */
    getClanRanks(locationId: number | 'global', options?: SearchOptions): Promise<RankedClan[]>;
    /**
     * Get player rankings for a specific location.
     *
     * For global ranking, use `global` as `locationId`.
     */
    getPlayerRanks(locationId: number | 'global', options?: SearchOptions): Promise<RankedPlayer[]>;
    /**
     * Get clan versus rankings for a specific location.
     *
     * For global ranking, use `global` as `locationId`.
     */
    getVersusClanRanks(locationId: number | 'global', options?: SearchOptions): Promise<RankedClan[]>;
    /**
     * Get player versus rankings for a specific location.
     *
     * For global ranking, use `global` as `locationId`.
     */
    getVersusPlayerRanks(locationId: number | 'global', options?: SearchOptions): Promise<RankedPlayer[]>;
    /** Get list of clan labels. */
    getClanLabels(options?: SearchOptions): Promise<Label[]>;
    /** Get list of player labels. */
    getPlayerLabels(options?: SearchOptions): Promise<Label[]>;
    /** Get info about gold pass season. */
    getGoldPassSeason(options?: OverrideOptions): Promise<GoldPassSeason>;
    /**
     * Emits when a new season starts.
     *
     * **Parameters**
     *
     * | Name |   Type   | Description           |
     * | :--: | :------: | :-------------------: |
     * | `id` | `string` | Id of the new season. |
     * @public
     * @event
     */
    private static newSeasonStart;
    /**
     * Emits when maintenance break starts in the API.
     * @public
     * @event
     */
    private static maintenanceStart;
    /**
     * Emits when maintenance break ends in the API.
     *
     * **Parameters**
     *
     * |    Name    |   Type   |                    Description                     |
     * | :--------: | :------: | :------------------------------------------------: |
     * | `duration` | `number` | Duration of the maintenance break in milliseconds. |
     * @public
     * @event
     */
    private static maintenanceEnd;
    /** @internal */
    on<K extends keyof ClientEvents>(event: K, listeners: (...args: ClientEvents[K]) => void): this;
    /** @internal */
    on<S extends keyof CustomEvents>(event: Exclude<S, keyof ClientEvents>, listeners: (...args: CustomEvents[S]) => void): this;
    /** @internal */ on<S extends string | symbol>(event: Exclude<S, keyof ClientEvents>, listeners: (...args: any[]) => void): this;
    /** @internal */
    once<K extends keyof ClientEvents>(event: K, listeners: (...args: ClientEvents[K]) => void): this;
    /** @internal */
    once<S extends keyof CustomEvents>(event: Exclude<S, keyof ClientEvents>, listeners: (...args: CustomEvents[S]) => void): this;
    /** @internal */ once<S extends string | symbol>(event: Exclude<S, keyof ClientEvents>, listeners: (...args: any[]) => void): this;
    /** @internal */
    emit<K extends keyof ClientEvents>(event: K, ...args: ClientEvents[K]): boolean;
    /** @internal */
    emit<S extends keyof CustomEvents>(event: Exclude<S, keyof ClientEvents>, ...args: CustomEvents[S]): this;
    /** @internal */ emit<S extends string | symbol>(event: Exclude<S, keyof ClientEvents>, ...args: any[]): boolean;
}
interface ClientEvents {
    [EVENTS.NEW_SEASON_START]: [id: string];
    [EVENTS.MAINTENANCE_START]: [];
    [EVENTS.MAINTENANCE_END]: [duration: number];
    [EVENTS.CLAN_LOOP_START]: [];
    [EVENTS.CLAN_LOOP_END]: [];
    [EVENTS.PLAYER_LOOP_START]: [];
    [EVENTS.PLAYER_LOOP_END]: [];
    [EVENTS.WAR_LOOP_START]: [];
    [EVENTS.WAR_LOOP_END]: [];
    [EVENTS.ERROR]: [error: unknown];
}
interface CustomEvents {
    [key: `clan${string}`]: [oldClan: Clan, newClan: Clan];
    [key: `war${string}`]: [oldWar: ClanWar, newWar: ClanWar];
    [key: `player${string}`]: [oldPlayer: Player, newPlayer: Player];
}
export {};
