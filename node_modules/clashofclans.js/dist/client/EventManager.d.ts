import { Clan, ClanWar, Player } from '../struct';
import { Client } from './Client';
/** Represents Event Manager of the {@link Client}. */
export declare class EventManager {
    private readonly client;
    private readonly _clanTags;
    private readonly _playerTags;
    private readonly _warTags;
    private readonly _clans;
    private readonly _players;
    private readonly _wars;
    private readonly _events;
    private _inMaintenance;
    private _maintenanceStartTime;
    constructor(client: Client);
    /** Initialize the Event Manager to start pulling. */
    init(): Promise<string[]>;
    /** Add clan tags to clan events. */
    addClans(tags: string[] | string): this;
    /** Delete clan tags from clan events. */
    deleteClans(tags: string[] | string): this;
    /** Add player tags for player events. */
    addPlayers(tags: string[] | string): this;
    /** Delete player tags from player events. */
    deletePlayers(tags: string[] | string): this;
    /** Add clan tags for war events. */
    addWars(tags: string[] | string): this;
    /** Delete clan tags from war events. */
    deleteWars(tags: string[] | string): this;
    /**
     * Set your own custom clan event.
     *
     * In order to emit the custom event, you must have this filter function that returns a boolean.
     *
     * @example
     * ```js
     * client.events.addClans(['#2PP', '#8QU8J9LP']);
     *
     * client.events.setClanEvent({
     *   name: 'clanMemberUpdate',
     *   filter: (oldClan, newClan) => {
     *     return oldClan.memberCount !== newClan.memberCount;
     *   }
     * });
     *
     * client.on('clanMemberUpdate', (oldClan, newClan) => {
     *   console.log(oldClan.memberCount, newClan.memberCount);
     * });
     *
     * (async function () {
     *   await client.events.init();
     * })();
     * ```
     * @returns
     */
    setClanEvent(event: {
        name: string;
        filter: (oldClan: Clan, newClan: Clan) => boolean;
    }): this;
    /**
     * Set your own custom war event.
     *
     * In order to emit the custom event, you must have this filter function that returns a boolean.
     */
    setWarEvent(event: {
        name: string;
        filter: (oldWar: ClanWar, newWar: ClanWar) => boolean;
    }): this;
    /**
     * Set your own custom player event.
     *
     * In order to emit the custom event, you must have this filter function that returns a boolean.
     */
    setPlayerEvent(event: {
        name: string;
        filter: (oldPlayer: Player, newPlayer: Player) => boolean;
    }): this;
    private maintenanceHandler;
    private seasonEndHandler;
    private clanUpdateHandler;
    private playerUpdateHandler;
    private warUpdateHandler;
    private runClanUpdate;
    private runPlayerUpdate;
    private runWarUpdate;
}
