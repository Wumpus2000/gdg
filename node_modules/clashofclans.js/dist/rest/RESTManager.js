"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RESTManager = void 0;
const RequestHandler_1 = require("./RequestHandler");
const Util_1 = require("../util/Util");
/** Represents a REST Manager of the client. */
class RESTManager {
    constructor(options) {
        this.handler = new RequestHandler_1.RequestHandler(options);
    }
    /** Contains various general-purpose utility methods. */
    get util() {
        return Util_1.Util;
    }
    /**
     * Initialize the client to create keys.
     * @example
     * ```
     * const rest = new RESTManager();
     * rest.login({ email: 'developer@email.com', password: '***' });
     * ```
     */
    login(options) {
        return this.handler.init(options);
    }
    /** Set Clash of Clans API keys. */
    setKeys(keys) {
        this.handler.setKeys(keys);
        return this;
    }
    /** Search all clans by name and/or filtering the results using various criteria. */
    getClans(query, options) {
        return this.handler.request(`/clans${Util_1.Util.queryString(query)}`, options);
    }
    /** Get info about a clan. */
    getClan(clanTag, options) {
        return this.handler.request(`/clans/${Util_1.Util.encodeURI(clanTag)}`, options);
    }
    /** Get list of clan members. */
    getClanMembers(clanTag, options) {
        const query = Util_1.Util.queryString(options);
        return this.handler.request(`/clans/${Util_1.Util.encodeURI(clanTag)}/members${query}`, options);
    }
    /** Get clan war log. */
    getClanWarLog(clanTag, options) {
        const query = Util_1.Util.queryString(options);
        return this.handler.request(`/clans/${Util_1.Util.encodeURI(clanTag)}/warlog${query}`, options);
    }
    /** Get info about currently running war in the clan. */
    getCurrentWar(clanTag, options) {
        return this.handler.request(`/clans/${Util_1.Util.encodeURI(clanTag)}/currentwar`, options);
    }
    /** Get info about clan war league. */
    getClanWarLeagueGroup(clanTag, options) {
        return this.handler.request(`/clans/${Util_1.Util.encodeURI(clanTag)}/currentwar/leaguegroup`, options);
    }
    /** Get info about a CWL round by WarTag. */
    getClanWarLeagueRound(warTag, options) {
        return this.handler.request(`/clanwarleagues/wars/${Util_1.Util.encodeURI(warTag)}`, options);
    }
    /** Get info about a player by tag. */
    getPlayer(playerTag, options) {
        return this.handler.request(`/players/${Util_1.Util.encodeURI(playerTag)}`, options);
    }
    /** Verify Player API token that can be found from the Game settings. */
    verifyPlayerToken(playerTag, token, options) {
        const opts = { method: 'POST', body: JSON.stringify({ token }), ...options };
        return this.handler.request(`/players/${Util_1.Util.encodeURI(playerTag)}/verifytoken`, opts);
    }
    /** Get list of Leagues. */
    getLeagues(options) {
        const query = Util_1.Util.queryString(options);
        return this.handler.request(`/leagues${query}`, options);
    }
    /** Get a League info. */
    getLeague(leagueId, options) {
        return this.handler.request(`/leagues/${leagueId}`, options);
    }
    /** Get Legend League season Ids. */
    getLeagueSeasons(leagueId, options) {
        const query = Util_1.Util.queryString(options);
        return this.handler.request(`/leagues/${leagueId}/seasons${query}`, options);
    }
    /** Get Legend League season rankings by season Id. */
    getSeasonRankings(leagueId, seasonId, options) {
        const query = Util_1.Util.queryString(options);
        return this.handler.request(`/leagues/${leagueId}/seasons/${seasonId}${query}`, options);
    }
    /** Get list of Clan War Leagues. */
    getWarLeagues(options) {
        const query = Util_1.Util.queryString(options);
        return this.handler.request(`/warleagues${query}`, options);
    }
    /** Get info about a Clan War League. */
    getWarLeague(leagueId, options) {
        return this.handler.request(`/warleagues/${leagueId}`, options);
    }
    /** Get list of Locations. */
    getLocations(options) {
        const query = Util_1.Util.queryString(options);
        return this.handler.request(`/locations${query}`, options);
    }
    /** Get info about a Location. */
    getLocation(locationId, options) {
        return this.handler.request(`/locations/${locationId}`, options);
    }
    /** Get clan rankings for a specific location. */
    getClanRanks(locationId, options) {
        const query = Util_1.Util.queryString(options);
        return this.handler.request(`/locations/${locationId}/rankings/clans${query}`, options);
    }
    /** Get player rankings for a specific location. */
    getPlayerRanks(locationId, options) {
        const query = Util_1.Util.queryString(options);
        return this.handler.request(`/locations/${locationId}/rankings/players${query}`, options);
    }
    /** Get clan versus rankings for a specific location. */
    getVersusClanRanks(locationId, options) {
        const query = Util_1.Util.queryString(options);
        return this.handler.request(`/locations/${locationId}/rankings/clans-versus${query}`, options);
    }
    /** Get player versus rankings for a specific location. */
    getVersusPlayerRanks(locationId, options) {
        const query = Util_1.Util.queryString(options);
        return this.handler.request(`/locations/${locationId}/rankings/players-versus${query}`, options);
    }
    /** Get list of clan labels. */
    getClanLabels(options) {
        const query = Util_1.Util.queryString(options);
        return this.handler.request(`/labels/clans${query}`, options);
    }
    /** Get list of player labels. */
    getPlayerLabels(options) {
        const query = Util_1.Util.queryString(options);
        return this.handler.request(`/labels/players${query}`, options);
    }
    /** Get info about gold pass season. */
    getGoldPassSeason(options) {
        return this.handler.request('/goldpass/seasons/current', options);
    }
}
exports.RESTManager = RESTManager;
