/**
 * Represents a throttler that sleeps for x ms between each request.
 * ```js
 * const throttler = new QueueThrottler(1000 / 10);
 * // 10 requests per second or sleep for 100ms between each request.
 * ```
 */
export declare class QueueThrottler {
    private lastRun?;
    private readonly sleepTime;
    private readonly promises;
    constructor(sleepTime?: number);
    get remaining(): number;
    throttle(): Promise<void>;
    wait(): Promise<void>;
    private shift;
}
/**
 * Represents a throttler that allows x requests per second before sleeping until the next second.
 * ```js
 * const throttler = new BatchThrottler(30);
 * // 30 requests every second.
 * ```
 */
export declare class BatchThrottler {
    #private;
    private readonly rateLimit;
    constructor(rateLimit?: number);
    wait(): Promise<void>;
    throttle(): Promise<void>;
}
