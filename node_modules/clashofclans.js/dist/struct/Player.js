"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Player = void 0;
const Constants_1 = require("../util/Constants");
const LegendStatistics_1 = require("./LegendStatistics");
const Achievement_1 = require("./Achievement");
const Unit_1 = require("./Unit");
const PlayerClan_1 = require("./PlayerClan");
const League_1 = require("./League");
const Label_1 = require("./Label");
/** Represents a Clash of Clans Player. */
class Player {
    constructor(client, data) {
        this.client = client;
        this.name = data.name;
        this.tag = data.tag;
        this.townHallLevel = data.townHallLevel;
        this.townHallWeaponLevel = data.townHallWeaponLevel ?? null;
        this.expLevel = data.expLevel;
        this.trophies = data.trophies;
        this.bestTrophies = data.bestTrophies;
        this.warStars = data.warStars;
        this.attackWins = data.attackWins;
        this.defenseWins = data.defenseWins;
        this.builderHallLevel = data.builderHallLevel ?? null;
        this.versusTrophies = data.versusTrophies ?? null;
        this.bestVersusTrophies = data.bestVersusTrophies ?? null;
        this.versusBattleWins = data.versusBattleWins ?? null;
        this.donations = data.donations;
        this.received = data.donationsReceived;
        // @ts-expect-error
        this.role = data.role?.replace('admin', 'elder') ?? null;
        this.warOptedIn = data.warPreference ? data.warPreference === 'in' : null;
        this.clan = data.clan ? new PlayerClan_1.PlayerClan(client, data.clan) : null;
        this.league = new League_1.League(data.league ?? Constants_1.UNRANKED_LEAGUE_DATA);
        this.legendStatistics = data.legendStatistics ? new LegendStatistics_1.LegendStatistics(data.legendStatistics) : null;
        this.achievements = data.achievements.map((data) => new Achievement_1.Achievement(data));
        this.labels = data.labels.map((data) => new Label_1.Label(data));
        this.troops = data.troops.map((unit) => new Unit_1.Troop(data, unit));
        this.spells = data.spells.map((unit) => new Unit_1.Spell(data, unit));
        this.heroes = data.heroes.map((unit) => new Unit_1.Hero(data, unit));
    }
    /** Fetch detailed clan info for the player's clan. */
    async fetchClan(options) {
        if (!this.clan)
            return null;
        return this.client.getClan(this.clan.tag, options);
    }
    /** An array of the player's home base troops. */
    get homeTroops() {
        return this.troops
            .filter((entry) => Constants_1.HOME_TROOPS.includes(entry.name))
            .sort((a, b) => Constants_1.HOME_TROOPS.indexOf(a.name) - Constants_1.HOME_TROOPS.indexOf(b.name));
    }
    /** An array of the player's builder base troops. */
    get builderTroops() {
        return this.troops
            .filter((entry) => Constants_1.BUILDER_TROOPS.includes(entry.name))
            .sort((a, b) => Constants_1.BUILDER_TROOPS.indexOf(a.name) - Constants_1.BUILDER_TROOPS.indexOf(b.name));
    }
    /** An array of the player's super troops. */
    get superTroops() {
        return this.troops
            .filter((entry) => Constants_1.SUPER_TROOPS.includes(entry.name))
            .sort((a, b) => Constants_1.SUPER_TROOPS.indexOf(a.name) - Constants_1.SUPER_TROOPS.indexOf(b.name));
    }
    /** An array of the player's hero pets. */
    get heroPets() {
        return this.troops
            .filter((entry) => Constants_1.HERO_PETS.includes(entry.name))
            .sort((a, b) => Constants_1.HERO_PETS.indexOf(a.name) - Constants_1.HERO_PETS.indexOf(b.name));
    }
    /** An array of the player's siege machines. */
    get siegeMachines() {
        return this.troops
            .filter((entry) => Constants_1.SIEGE_MACHINES.includes(entry.name))
            .sort((a, b) => Constants_1.SIEGE_MACHINES.indexOf(a.name) - Constants_1.SIEGE_MACHINES.indexOf(b.name));
    }
}
exports.Player = Player;
